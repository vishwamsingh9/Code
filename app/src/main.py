import pandas as pd

def read_data(file_path):
    """
    Reads a CSV file into a pandas DataFrame.
    
    Args:
        file_path (str): The path to the CSV file.
        
    Returns:
        DataFrame: A pandas DataFrame containing the data from the CSV file.
        None: Returns None if the file could not be found or read.
    """
    try:
        return pd.read_csv(file_path)
    except FileNotFoundError:
        print(f"File not found: {file_path}")
        return None
    except pd.errors.ParserError:
        print(f"Error parsing file: {file_path}")
        return None

def compute_revenue_by_month(data):
    """
    Computes the total revenue generated by the online store for each month.
    
    Args:
        data (DataFrame): The orders data.
        
    Returns:
        Series: Total revenue per month.
    """
    try:
        data['order_date'] = pd.to_datetime(data['order_date'])
        data['month'] = data['order_date'].dt.to_period('M')
        data['total_price'] = data['product_price'] * data['quantity']
        return data.groupby('month')['total_price'].sum()
    except KeyError as e:
        print(f"Missing column in data: {e}")
        return None
    except Exception as e:
        print(f"An error occurred: {e}")
        return None

def compute_revenue_by_product(data):
    """
    Computes the total revenue generated by each product.
    
    Args:
        data (DataFrame): The orders data.
        
    Returns:
        Series: Total revenue per product.
    """
    try:
        return data.groupby('product_name')['total_price'].sum()
    except KeyError as e:
        print(f"Missing column in data: {e}")
        return None

def compute_revenue_by_customer(data):
    """
    Computes the total revenue generated by each customer.
    
    Args:
        data (DataFrame): The orders data.
        
    Returns:
        Series: Total revenue per customer.
    """
    try:
        return data.groupby('customer_id')['total_price'].sum()
    except KeyError as e:
        print(f"Missing column in data: {e}")
        return None

def top_10_customers(data):
    """
    Identifies the top 10 customers by revenue generated.
    
    Args:
        data (DataFrame): The orders data.
        
    Returns:
        Series: Top 10 customers by revenue.
    """
    try:
        return data.groupby('customer_id')['total_price'].sum().nlargest(10)
    except KeyError as e:
        print(f"Missing column in data: {e}")
        return None

if __name__ == "__main__":
    file_path = 'orders.csv'
    data = read_data(file_path)

    if data is not None:
        print("Total Revenue by Month:")
        print(compute_revenue_by_month(data))
        print("\nTotal Revenue by Product:")
        print(compute_revenue_by_product(data))
        print("\nTotal Revenue by Customer:")
        print(compute_revenue_by_customer(data))
        print("\nTop 10 Customers by Revenue:")
        print(top_10_customers(data))
